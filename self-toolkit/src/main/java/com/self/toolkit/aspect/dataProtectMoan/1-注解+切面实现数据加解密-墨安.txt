背景
由于数据安全的要求, 主键id要求只能以密文形式对外展示

每个VO对象 有两个属性, 分别存储id的明文和密文, 例如: id,key,  userId,userKey

设计
1 自定义注解@DataProtection实现标记
2 自定义切面, 以注解@DataProtection为切入点, 执行加解密逻辑
3 需要加解密的字段, 通过注解的参数传入(须遵循以固定的格式)
4 在需要的方法上, 加入注解
5 @DectyptToId, 参数级别的标记注解, 被标记的字段直接进行解密(只能用于String类型)

缺点:
1 不是通用设计, 只能针对墨安的业务场景
2 只能操作第一层级的参数


需要的依赖
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>